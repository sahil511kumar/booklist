{"version":3,"sources":["reducers/booklistReducer.js","contexts/bookcontext.js","components/navbar.jsx","components/booklist.jsx","components/bookform.jsx","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","BookForm","useState","settitle","setauthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAEaA,EAAa,SAACC,EAAMC,GAC7B,OAAOA,EAAOC,MAEV,IAAK,WACD,MAAM,GAAN,mBAAWF,GAAX,CAAiB,CAACG,MAAMF,EAAOG,KAAKD,MAAOE,OAAOJ,EAAOG,KAAKC,OAAOC,GAAGC,SAC5E,IAAK,cACD,OAAOP,EAAMQ,QAAO,SAAAJ,GAAI,OAAEA,EAAKE,KAAKL,EAAOK,MAC/C,QACI,OAAON,ICNNS,EAAcC,0BAgBZC,EAfa,SAACC,GAAW,IAAD,EACTC,qBAAWd,EAAY,IAAG,WAChD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAUG,KAAKC,MAAMJ,GAAW,MAHR,mBAC5BK,EAD4B,KACrBC,EADqB,KAQnC,OAHAC,qBAAU,WACPN,aAAaO,QAAQ,QAAQL,KAAKM,UAAUJ,MACzC,CAACA,IAEH,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAACN,QAAMC,aAC/BR,EAAMc,WCFJC,EAVA,WAAO,IACXR,EAASS,qBAAWnB,GAApBU,MACP,OACI,yBAAKU,UAAU,UACX,6CACA,2BAAIV,EAAMW,OAAV,+BCJNC,EAAc,SAAC,GAAY,IAAX3B,EAAU,EAAVA,KACXgB,EAAYQ,qBAAWnB,GAAvBW,SACP,OACI,wBAAIY,QAAS,kBAAIZ,EAAS,CAAClB,KAAK,cAAcI,GAAGF,EAAKE,OAClD,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,UAAUzB,EAAKC,UAsB3B4B,EAhBE,WAAO,IACbd,EAASS,qBAAWnB,GAApBU,MACP,OAAOA,EAAMW,OACT,yBAAKD,UAAU,YACX,4BACKV,EAAMe,KAAI,SAAA9B,GAAI,OACX,kBAAC,EAAD,CAAaA,KAAMA,EAAM+B,IAAK/B,EAAKE,UAM9C,yBAAKuB,UAAU,SAAf,uBCHMO,EArBE,WAAO,IACbhB,EAAWQ,qBAAWnB,GAAtBW,SADY,EAEOiB,mBAAS,IAFhB,mBAEZlC,EAFY,KAELmC,EAFK,OAGSD,mBAAS,IAHlB,mBAGZhC,EAHY,KAGJkC,EAHI,KAYnB,OACI,0BAAMC,SATS,SAACC,GAChBA,EAAEC,iBACFtB,EAAS,CAAClB,KAAK,WAAWE,KAAK,CAC3BD,QAAME,YAEViC,EAAS,IACTC,EAAU,MAIN,2BAAOrC,KAAK,OAAOyC,YAAY,aAAalB,MAAOtB,EAAOyC,SAAU,SAACH,GAAD,OAAKH,EAASG,EAAEI,OAAOpB,QAAQqB,UAAQ,IAC3G,2BAAO5C,KAAK,OAAOyC,YAAY,cAAclB,MAAOpB,EAAQuC,SAAU,SAACH,GAAD,OAAKF,EAAUE,EAAEI,OAAOpB,QAAQqB,UAAQ,IAC9G,4BAAQ5C,KAAK,UAAb,cCDG6C,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.226fab6e.chunk.js","sourcesContent":["import uuid from 'uuid/dist/v1';\r\n\r\nexport const bookReducer =(state,action)=>{\r\n    switch(action.type)\r\n    {\r\n        case 'ADD_BOOK':\r\n            return [...state,{title:action.book.title, author:action.book.author,id:uuid()}]\r\n        case 'REMOVE_BOOK':\r\n            return state.filter(book=>book.id!==action.id)\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer,useEffect} from 'react';\r\n\r\nimport { bookReducer } from '../reducers/booklistReducer';\r\n\r\nexport const BookContext = createContext();\r\nconst BookContextProvider = (props) => {\r\n    const [books, dispatch] = useReducer(bookReducer,[],()=>{\r\n        const localData = localStorage.getItem('books');\r\n        return localData?JSON.parse(localData):[];\r\n    })\r\n    useEffect(() => {\r\n       localStorage.setItem('books',JSON.stringify(books));\r\n        },[books])\r\n    return ( \r\n        <BookContext.Provider value={{books,dispatch}}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n     );\r\n}\r\n \r\nexport default BookContextProvider;\r\n","import React,{useContext} from 'react';\r\nimport {BookContext} from '../contexts/bookcontext';\r\n\r\nconst Navbar = () => {\r\n    const {books} = useContext(BookContext);\r\n    return ( \r\n        <div className=\"navbar\">\r\n            <h1>BOOKS TO READ</h1>\r\n            <p>{books.length} books left to go through</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import React,{useContext} from 'react';\r\nimport { BookContext } from '../contexts/bookcontext';\r\n\r\n\r\nconst BookDetails = ({book}) => {\r\n    const {dispatch} = useContext(BookContext);\r\n    return ( \r\n        <li onClick={()=>dispatch({type:'REMOVE_BOOK',id:book.id})}>\r\n            <div className=\"title\">{book.title}</div>\r\n            <div className=\"author\">{book.author}</div>\r\n        </li>\r\n     );\r\n}\r\n \r\n\r\nconst BookList = () => {\r\n    const {books} = useContext(BookContext);\r\n    return books.length? ( \r\n        <div className=\"booklist\">\r\n            <ul>\r\n                {books.map(book=>(\r\n                    <BookDetails book={book} key={book.id}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n        \r\n     ):(\r\n         <div className=\"empty\">No books !! HURRAY</div>\r\n     );\r\n}\r\n \r\nexport default BookList;","import React, { useContext, useState } from 'react';\r\nimport { BookContext } from '../contexts/bookcontext';\r\n\r\nconst BookForm = () => {\r\n    const {dispatch}= useContext(BookContext);\r\n    const [title, settitle] = useState('');\r\n    const [author, setauthor] = useState('');\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        dispatch({type:'ADD_BOOK',book:{\r\n            title,author\r\n        }});\r\n        settitle('');\r\n        setauthor('');\r\n    }\r\n    return ( \r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Book Title\" value={title} onChange={(e)=>settitle(e.target.value)} required/>\r\n            <input type=\"text\" placeholder=\"Book Author\" value={author} onChange={(e)=>setauthor(e.target.value)} required/>\r\n            <button type=\"submit\">Add Book</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default BookForm;","import React from 'react';\r\nimport BookContextProvider from './contexts/bookcontext';\r\nimport Navbar from './components/navbar';\r\nimport BookList from './components/booklist';\r\nimport BookForm from './components/bookform';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BookContextProvider>\r\n        <Navbar/>\r\n        <BookList/>\r\n        <BookForm/>\r\n      </BookContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}